// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Domain domain
//
// swagger:model domain
type Domain struct {

	// the actual domain
	// Example: maps.google.com
	// Required: true
	Domain *string `json:"domain"`

	// ID of domain
	// Example: 891d37d3-c74f-493e-aea8-af73efd92016
	// Required: true
	// Format: uuid4
	DomainID *strfmt.UUID4 `json:"domainId"`

	// the parent domain, only exists if domain is a subdomain
	// Example: google.com
	ParentDomain string `json:"parentDomain,omitempty"`

	// stamps
	Stamps []*Stamp `json:"stamps"`
}

// Validate validates this domain
func (m *Domain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStamps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Domain) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *Domain) validateDomainID(formats strfmt.Registry) error {

	if err := validate.Required("domainId", "body", m.DomainID); err != nil {
		return err
	}

	if err := validate.FormatOf("domainId", "body", "uuid4", m.DomainID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Domain) validateStamps(formats strfmt.Registry) error {
	if swag.IsZero(m.Stamps) { // not required
		return nil
	}

	for i := 0; i < len(m.Stamps); i++ {
		if swag.IsZero(m.Stamps[i]) { // not required
			continue
		}

		if m.Stamps[i] != nil {
			if err := m.Stamps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stamps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stamps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this domain based on the context it is used
func (m *Domain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStamps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Domain) contextValidateStamps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Stamps); i++ {

		if m.Stamps[i] != nil {
			if err := m.Stamps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stamps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stamps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Domain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Domain) UnmarshalBinary(b []byte) error {
	var res Domain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
