// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostStampPayload post stamp payload
//
// swagger:model postStampPayload
type PostStampPayload struct {

	// If the vote agrees with the stamp
	// Required: true
	Approved *bool `json:"approved"`

	// ID of the domain
	// Required: true
	// Format: uuid4
	DomainID *strfmt.UUID4 `json:"domainId"`

	// Optional rating, only possible if the vote agrees
	// Maximum: 9
	// Minimum: 0
	Rating *int64 `json:"rating,omitempty"`

	// ID of the stamp
	// Required: true
	// Format: uuid4
	StampID *strfmt.UUID4 `json:"stampId"`
}

// Validate validates this post stamp payload
func (m *PostStampPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApproved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStampID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostStampPayload) validateApproved(formats strfmt.Registry) error {

	if err := validate.Required("approved", "body", m.Approved); err != nil {
		return err
	}

	return nil
}

func (m *PostStampPayload) validateDomainID(formats strfmt.Registry) error {

	if err := validate.Required("domainId", "body", m.DomainID); err != nil {
		return err
	}

	if err := validate.FormatOf("domainId", "body", "uuid4", m.DomainID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PostStampPayload) validateRating(formats strfmt.Registry) error {
	if swag.IsZero(m.Rating) { // not required
		return nil
	}

	if err := validate.MinimumInt("rating", "body", *m.Rating, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("rating", "body", *m.Rating, 9, false); err != nil {
		return err
	}

	return nil
}

func (m *PostStampPayload) validateStampID(formats strfmt.Registry) error {

	if err := validate.Required("stampId", "body", m.StampID); err != nil {
		return err
	}

	if err := validate.FormatOf("stampId", "body", "uuid4", m.StampID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post stamp payload based on context it is used
func (m *PostStampPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostStampPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostStampPayload) UnmarshalBinary(b []byte) error {
	var res PostStampPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
