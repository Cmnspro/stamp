// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stamp stamp
//
// swagger:model stamp
type Stamp struct {

	// The ID of the stamp
	// Required: true
	// Format: uuid4
	StampID *strfmt.UUID4 `json:"stampId"`

	// The name of the Stamp
	// Example: Analytics
	// Required: true
	StampName *string `json:"stampName"`

	// votes
	// Required: true
	Votes []*Vote `json:"votes"`
}

// Validate validates this stamp
func (m *Stamp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStampID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStampName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stamp) validateStampID(formats strfmt.Registry) error {

	if err := validate.Required("stampId", "body", m.StampID); err != nil {
		return err
	}

	if err := validate.FormatOf("stampId", "body", "uuid4", m.StampID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Stamp) validateStampName(formats strfmt.Registry) error {

	if err := validate.Required("stampName", "body", m.StampName); err != nil {
		return err
	}

	return nil
}

func (m *Stamp) validateVotes(formats strfmt.Registry) error {

	if err := validate.Required("votes", "body", m.Votes); err != nil {
		return err
	}

	for i := 0; i < len(m.Votes); i++ {
		if swag.IsZero(m.Votes[i]) { // not required
			continue
		}

		if m.Votes[i] != nil {
			if err := m.Votes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("votes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("votes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this stamp based on the context it is used
func (m *Stamp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVotes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stamp) contextValidateVotes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Votes); i++ {

		if m.Votes[i] != nil {
			if err := m.Votes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("votes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("votes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Stamp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stamp) UnmarshalBinary(b []byte) error {
	var res Stamp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
