// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DomainStamp is an object representing the database table.
type DomainStamp struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	DomainID  string    `boil:"domain_id" json:"domain_id" toml:"domain_id" yaml:"domain_id"`
	StampID   string    `boil:"stamp_id" json:"stamp_id" toml:"stamp_id" yaml:"stamp_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *domainStampR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L domainStampL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DomainStampColumns = struct {
	ID        string
	DomainID  string
	StampID   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	DomainID:  "domain_id",
	StampID:   "stamp_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var DomainStampTableColumns = struct {
	ID        string
	DomainID  string
	StampID   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "domain_stamps.id",
	DomainID:  "domain_stamps.domain_id",
	StampID:   "domain_stamps.stamp_id",
	CreatedAt: "domain_stamps.created_at",
	UpdatedAt: "domain_stamps.updated_at",
}

// Generated where

var DomainStampWhere = struct {
	ID        whereHelperstring
	DomainID  whereHelperstring
	StampID   whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"domain_stamps\".\"id\""},
	DomainID:  whereHelperstring{field: "\"domain_stamps\".\"domain_id\""},
	StampID:   whereHelperstring{field: "\"domain_stamps\".\"stamp_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"domain_stamps\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"domain_stamps\".\"updated_at\""},
}

// DomainStampRels is where relationship names are stored.
var DomainStampRels = struct {
	Domain string
	Stamp  string
	Votes  string
}{
	Domain: "Domain",
	Stamp:  "Stamp",
	Votes:  "Votes",
}

// domainStampR is where relationships are stored.
type domainStampR struct {
	Domain *Domain   `boil:"Domain" json:"Domain" toml:"Domain" yaml:"Domain"`
	Stamp  *Stamp    `boil:"Stamp" json:"Stamp" toml:"Stamp" yaml:"Stamp"`
	Votes  VoteSlice `boil:"Votes" json:"Votes" toml:"Votes" yaml:"Votes"`
}

// NewStruct creates a new relationship struct
func (*domainStampR) NewStruct() *domainStampR {
	return &domainStampR{}
}

// domainStampL is where Load methods for each relationship are stored.
type domainStampL struct{}

var (
	domainStampAllColumns            = []string{"id", "domain_id", "stamp_id", "created_at", "updated_at"}
	domainStampColumnsWithoutDefault = []string{"domain_id", "stamp_id", "created_at", "updated_at"}
	domainStampColumnsWithDefault    = []string{"id"}
	domainStampPrimaryKeyColumns     = []string{"id"}
)

type (
	// DomainStampSlice is an alias for a slice of pointers to DomainStamp.
	// This should almost always be used instead of []DomainStamp.
	DomainStampSlice []*DomainStamp

	domainStampQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	domainStampType                 = reflect.TypeOf(&DomainStamp{})
	domainStampMapping              = queries.MakeStructMapping(domainStampType)
	domainStampPrimaryKeyMapping, _ = queries.BindMapping(domainStampType, domainStampMapping, domainStampPrimaryKeyColumns)
	domainStampInsertCacheMut       sync.RWMutex
	domainStampInsertCache          = make(map[string]insertCache)
	domainStampUpdateCacheMut       sync.RWMutex
	domainStampUpdateCache          = make(map[string]updateCache)
	domainStampUpsertCacheMut       sync.RWMutex
	domainStampUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single domainStamp record from the query.
func (q domainStampQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DomainStamp, error) {
	o := &DomainStamp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for domain_stamps")
	}

	return o, nil
}

// All returns all DomainStamp records from the query.
func (q domainStampQuery) All(ctx context.Context, exec boil.ContextExecutor) (DomainStampSlice, error) {
	var o []*DomainStamp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DomainStamp slice")
	}

	return o, nil
}

// Count returns the count of all DomainStamp records in the query.
func (q domainStampQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count domain_stamps rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q domainStampQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if domain_stamps exists")
	}

	return count > 0, nil
}

// Domain pointed to by the foreign key.
func (o *DomainStamp) Domain(mods ...qm.QueryMod) domainQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DomainID),
	}

	queryMods = append(queryMods, mods...)

	query := Domains(queryMods...)
	queries.SetFrom(query.Query, "\"domains\"")

	return query
}

// Stamp pointed to by the foreign key.
func (o *DomainStamp) Stamp(mods ...qm.QueryMod) stampQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StampID),
	}

	queryMods = append(queryMods, mods...)

	query := Stamps(queryMods...)
	queries.SetFrom(query.Query, "\"stamps\"")

	return query
}

// Votes retrieves all the vote's Votes with an executor.
func (o *DomainStamp) Votes(mods ...qm.QueryMod) voteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"votes\".\"domain_stamp_id\"=?", o.ID),
	)

	query := Votes(queryMods...)
	queries.SetFrom(query.Query, "\"votes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"votes\".*"})
	}

	return query
}

// LoadDomain allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (domainStampL) LoadDomain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomainStamp interface{}, mods queries.Applicator) error {
	var slice []*DomainStamp
	var object *DomainStamp

	if singular {
		object = maybeDomainStamp.(*DomainStamp)
	} else {
		slice = *maybeDomainStamp.(*[]*DomainStamp)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainStampR{}
		}
		args = append(args, object.DomainID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainStampR{}
			}

			for _, a := range args {
				if a == obj.DomainID {
					continue Outer
				}
			}

			args = append(args, obj.DomainID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`domains`),
		qm.WhereIn(`domains.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Domain")
	}

	var resultSlice []*Domain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Domain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for domains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for domains")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Domain = foreign
		if foreign.R == nil {
			foreign.R = &domainR{}
		}
		foreign.R.DomainStamps = append(foreign.R.DomainStamps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DomainID == foreign.ID {
				local.R.Domain = foreign
				if foreign.R == nil {
					foreign.R = &domainR{}
				}
				foreign.R.DomainStamps = append(foreign.R.DomainStamps, local)
				break
			}
		}
	}

	return nil
}

// LoadStamp allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (domainStampL) LoadStamp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomainStamp interface{}, mods queries.Applicator) error {
	var slice []*DomainStamp
	var object *DomainStamp

	if singular {
		object = maybeDomainStamp.(*DomainStamp)
	} else {
		slice = *maybeDomainStamp.(*[]*DomainStamp)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainStampR{}
		}
		args = append(args, object.StampID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainStampR{}
			}

			for _, a := range args {
				if a == obj.StampID {
					continue Outer
				}
			}

			args = append(args, obj.StampID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stamps`),
		qm.WhereIn(`stamps.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Stamp")
	}

	var resultSlice []*Stamp
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Stamp")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stamps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stamps")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Stamp = foreign
		if foreign.R == nil {
			foreign.R = &stampR{}
		}
		foreign.R.DomainStamps = append(foreign.R.DomainStamps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StampID == foreign.ID {
				local.R.Stamp = foreign
				if foreign.R == nil {
					foreign.R = &stampR{}
				}
				foreign.R.DomainStamps = append(foreign.R.DomainStamps, local)
				break
			}
		}
	}

	return nil
}

// LoadVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainStampL) LoadVotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomainStamp interface{}, mods queries.Applicator) error {
	var slice []*DomainStamp
	var object *DomainStamp

	if singular {
		object = maybeDomainStamp.(*DomainStamp)
	} else {
		slice = *maybeDomainStamp.(*[]*DomainStamp)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainStampR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainStampR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`votes`),
		qm.WhereIn(`votes.domain_stamp_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load votes")
	}

	var resultSlice []*Vote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice votes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on votes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for votes")
	}

	if singular {
		object.R.Votes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voteR{}
			}
			foreign.R.DomainStamp = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DomainStampID {
				local.R.Votes = append(local.R.Votes, foreign)
				if foreign.R == nil {
					foreign.R = &voteR{}
				}
				foreign.R.DomainStamp = local
				break
			}
		}
	}

	return nil
}

// SetDomain of the domainStamp to the related item.
// Sets o.R.Domain to related.
// Adds o to related.R.DomainStamps.
func (o *DomainStamp) SetDomain(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Domain) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"domain_stamps\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
		strmangle.WhereClause("\"", "\"", 2, domainStampPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DomainID = related.ID
	if o.R == nil {
		o.R = &domainStampR{
			Domain: related,
		}
	} else {
		o.R.Domain = related
	}

	if related.R == nil {
		related.R = &domainR{
			DomainStamps: DomainStampSlice{o},
		}
	} else {
		related.R.DomainStamps = append(related.R.DomainStamps, o)
	}

	return nil
}

// SetStamp of the domainStamp to the related item.
// Sets o.R.Stamp to related.
// Adds o to related.R.DomainStamps.
func (o *DomainStamp) SetStamp(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Stamp) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"domain_stamps\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"stamp_id"}),
		strmangle.WhereClause("\"", "\"", 2, domainStampPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StampID = related.ID
	if o.R == nil {
		o.R = &domainStampR{
			Stamp: related,
		}
	} else {
		o.R.Stamp = related
	}

	if related.R == nil {
		related.R = &stampR{
			DomainStamps: DomainStampSlice{o},
		}
	} else {
		related.R.DomainStamps = append(related.R.DomainStamps, o)
	}

	return nil
}

// AddVotes adds the given related objects to the existing relationships
// of the domain_stamp, optionally inserting them as new records.
// Appends related to o.R.Votes.
// Sets related.R.DomainStamp appropriately.
func (o *DomainStamp) AddVotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DomainStampID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"votes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"domain_stamp_id"}),
				strmangle.WhereClause("\"", "\"", 2, votePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DomainStampID = o.ID
		}
	}

	if o.R == nil {
		o.R = &domainStampR{
			Votes: related,
		}
	} else {
		o.R.Votes = append(o.R.Votes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voteR{
				DomainStamp: o,
			}
		} else {
			rel.R.DomainStamp = o
		}
	}
	return nil
}

// DomainStamps retrieves all the records using an executor.
func DomainStamps(mods ...qm.QueryMod) domainStampQuery {
	mods = append(mods, qm.From("\"domain_stamps\""))
	return domainStampQuery{NewQuery(mods...)}
}

// FindDomainStamp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDomainStamp(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DomainStamp, error) {
	domainStampObj := &DomainStamp{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"domain_stamps\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, domainStampObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from domain_stamps")
	}

	return domainStampObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DomainStamp) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no domain_stamps provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(domainStampColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	domainStampInsertCacheMut.RLock()
	cache, cached := domainStampInsertCache[key]
	domainStampInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			domainStampAllColumns,
			domainStampColumnsWithDefault,
			domainStampColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(domainStampType, domainStampMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(domainStampType, domainStampMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"domain_stamps\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"domain_stamps\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into domain_stamps")
	}

	if !cached {
		domainStampInsertCacheMut.Lock()
		domainStampInsertCache[key] = cache
		domainStampInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DomainStamp.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DomainStamp) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	domainStampUpdateCacheMut.RLock()
	cache, cached := domainStampUpdateCache[key]
	domainStampUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			domainStampAllColumns,
			domainStampPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update domain_stamps, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"domain_stamps\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, domainStampPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(domainStampType, domainStampMapping, append(wl, domainStampPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update domain_stamps row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for domain_stamps")
	}

	if !cached {
		domainStampUpdateCacheMut.Lock()
		domainStampUpdateCache[key] = cache
		domainStampUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q domainStampQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for domain_stamps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for domain_stamps")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DomainStampSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainStampPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"domain_stamps\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, domainStampPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in domainStamp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all domainStamp")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DomainStamp) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no domain_stamps provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(domainStampColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	domainStampUpsertCacheMut.RLock()
	cache, cached := domainStampUpsertCache[key]
	domainStampUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			domainStampAllColumns,
			domainStampColumnsWithDefault,
			domainStampColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			domainStampAllColumns,
			domainStampPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert domain_stamps, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(domainStampPrimaryKeyColumns))
			copy(conflict, domainStampPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"domain_stamps\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(domainStampType, domainStampMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(domainStampType, domainStampMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert domain_stamps")
	}

	if !cached {
		domainStampUpsertCacheMut.Lock()
		domainStampUpsertCache[key] = cache
		domainStampUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DomainStamp record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DomainStamp) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DomainStamp provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), domainStampPrimaryKeyMapping)
	sql := "DELETE FROM \"domain_stamps\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from domain_stamps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for domain_stamps")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q domainStampQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no domainStampQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from domain_stamps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for domain_stamps")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DomainStampSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainStampPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"domain_stamps\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, domainStampPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from domainStamp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for domain_stamps")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DomainStamp) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDomainStamp(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DomainStampSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DomainStampSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainStampPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"domain_stamps\".* FROM \"domain_stamps\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, domainStampPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DomainStampSlice")
	}

	*o = slice

	return nil
}

// DomainStampExists checks if the DomainStamp row exists.
func DomainStampExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"domain_stamps\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if domain_stamps exists")
	}

	return exists, nil
}
