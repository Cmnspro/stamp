// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testApplicantTags(t *testing.T) {
	t.Parallel()

	query := ApplicantTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testApplicantTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ApplicantTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApplicantTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ApplicantTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ApplicantTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApplicantTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ApplicantTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ApplicantTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApplicantTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ApplicantTagExists(ctx, tx, o.ApplicantID, o.TagID)
	if err != nil {
		t.Errorf("Unable to check if ApplicantTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ApplicantTagExists to return true, but got false.")
	}
}

func testApplicantTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	applicantTagFound, err := FindApplicantTag(ctx, tx, o.ApplicantID, o.TagID)
	if err != nil {
		t.Error(err)
	}

	if applicantTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testApplicantTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ApplicantTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testApplicantTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ApplicantTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testApplicantTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicantTagOne := &ApplicantTag{}
	applicantTagTwo := &ApplicantTag{}
	if err = randomize.Struct(seed, applicantTagOne, applicantTagDBTypes, false, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}
	if err = randomize.Struct(seed, applicantTagTwo, applicantTagDBTypes, false, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = applicantTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = applicantTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ApplicantTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testApplicantTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	applicantTagOne := &ApplicantTag{}
	applicantTagTwo := &ApplicantTag{}
	if err = randomize.Struct(seed, applicantTagOne, applicantTagDBTypes, false, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}
	if err = randomize.Struct(seed, applicantTagTwo, applicantTagDBTypes, false, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = applicantTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = applicantTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ApplicantTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testApplicantTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ApplicantTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testApplicantTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(applicantTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ApplicantTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testApplicantTagToOneApplicantUsingApplicant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ApplicantTag
	var foreign Applicant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, applicantTagDBTypes, false, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, applicantDBTypes, false, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ApplicantID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Applicant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ApplicantTagSlice{&local}
	if err = local.L.LoadApplicant(ctx, tx, false, (*[]*ApplicantTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Applicant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Applicant = nil
	if err = local.L.LoadApplicant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Applicant == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testApplicantTagToOneTagUsingTag(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ApplicantTag
	var foreign Tag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, applicantTagDBTypes, false, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TagID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tag().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ApplicantTagSlice{&local}
	if err = local.L.LoadTag(ctx, tx, false, (*[]*ApplicantTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testApplicantTagToOneSetOpApplicantUsingApplicant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ApplicantTag
	var b, c Applicant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, applicantTagDBTypes, false, strmangle.SetComplement(applicantTagPrimaryKeyColumns, applicantTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, applicantDBTypes, false, strmangle.SetComplement(applicantPrimaryKeyColumns, applicantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, applicantDBTypes, false, strmangle.SetComplement(applicantPrimaryKeyColumns, applicantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Applicant{&b, &c} {
		err = a.SetApplicant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Applicant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ApplicantTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ApplicantID != x.ID {
			t.Error("foreign key was wrong value", a.ApplicantID)
		}

		if exists, err := ApplicantTagExists(ctx, tx, a.ApplicantID, a.TagID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testApplicantTagToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ApplicantTag
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, applicantTagDBTypes, false, strmangle.SetComplement(applicantTagPrimaryKeyColumns, applicantTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ApplicantTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID)
		}

		if exists, err := ApplicantTagExists(ctx, tx, a.ApplicantID, a.TagID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testApplicantTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testApplicantTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ApplicantTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testApplicantTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ApplicantTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	applicantTagDBTypes = map[string]string{`ApplicantID`: `uuid`, `TagID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                   = bytes.MinRead
)

func testApplicantTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(applicantTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(applicantTagAllColumns) == len(applicantTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ApplicantTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testApplicantTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(applicantTagAllColumns) == len(applicantTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ApplicantTag{}
	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ApplicantTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, applicantTagDBTypes, true, applicantTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(applicantTagAllColumns, applicantTagPrimaryKeyColumns) {
		fields = applicantTagAllColumns
	} else {
		fields = strmangle.SetComplement(
			applicantTagAllColumns,
			applicantTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ApplicantTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testApplicantTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(applicantTagAllColumns) == len(applicantTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ApplicantTag{}
	if err = randomize.Struct(seed, &o, applicantTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ApplicantTag: %s", err)
	}

	count, err := ApplicantTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, applicantTagDBTypes, false, applicantTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ApplicantTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ApplicantTag: %s", err)
	}

	count, err = ApplicantTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
