// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RoleNotificationTemplate is an object representing the database table.
type RoleNotificationTemplate struct {
	RoleID                 string    `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`
	NotificationTemplateID string    `boil:"notification_template_id" json:"notification_template_id" toml:"notification_template_id" yaml:"notification_template_id"`
	CreatedAt              time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt              time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *roleNotificationTemplateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleNotificationTemplateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleNotificationTemplateColumns = struct {
	RoleID                 string
	NotificationTemplateID string
	CreatedAt              string
	UpdatedAt              string
}{
	RoleID:                 "role_id",
	NotificationTemplateID: "notification_template_id",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
}

// Generated where

var RoleNotificationTemplateWhere = struct {
	RoleID                 whereHelperstring
	NotificationTemplateID whereHelperstring
	CreatedAt              whereHelpertime_Time
	UpdatedAt              whereHelpertime_Time
}{
	RoleID:                 whereHelperstring{field: "\"role_notification_templates\".\"role_id\""},
	NotificationTemplateID: whereHelperstring{field: "\"role_notification_templates\".\"notification_template_id\""},
	CreatedAt:              whereHelpertime_Time{field: "\"role_notification_templates\".\"created_at\""},
	UpdatedAt:              whereHelpertime_Time{field: "\"role_notification_templates\".\"updated_at\""},
}

// RoleNotificationTemplateRels is where relationship names are stored.
var RoleNotificationTemplateRels = struct {
	NotificationTemplate string
	Role                 string
}{
	NotificationTemplate: "NotificationTemplate",
	Role:                 "Role",
}

// roleNotificationTemplateR is where relationships are stored.
type roleNotificationTemplateR struct {
	NotificationTemplate *NotificationTemplate
	Role                 *Role
}

// NewStruct creates a new relationship struct
func (*roleNotificationTemplateR) NewStruct() *roleNotificationTemplateR {
	return &roleNotificationTemplateR{}
}

// roleNotificationTemplateL is where Load methods for each relationship are stored.
type roleNotificationTemplateL struct{}

var (
	roleNotificationTemplateAllColumns            = []string{"role_id", "notification_template_id", "created_at", "updated_at"}
	roleNotificationTemplateColumnsWithoutDefault = []string{"role_id", "notification_template_id", "created_at", "updated_at"}
	roleNotificationTemplateColumnsWithDefault    = []string{}
	roleNotificationTemplatePrimaryKeyColumns     = []string{"role_id", "notification_template_id"}
)

type (
	// RoleNotificationTemplateSlice is an alias for a slice of pointers to RoleNotificationTemplate.
	// This should generally be used opposed to []RoleNotificationTemplate.
	RoleNotificationTemplateSlice []*RoleNotificationTemplate
	// RoleNotificationTemplateHook is the signature for custom RoleNotificationTemplate hook methods
	RoleNotificationTemplateHook func(context.Context, boil.ContextExecutor, *RoleNotificationTemplate) error

	roleNotificationTemplateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleNotificationTemplateType                 = reflect.TypeOf(&RoleNotificationTemplate{})
	roleNotificationTemplateMapping              = queries.MakeStructMapping(roleNotificationTemplateType)
	roleNotificationTemplatePrimaryKeyMapping, _ = queries.BindMapping(roleNotificationTemplateType, roleNotificationTemplateMapping, roleNotificationTemplatePrimaryKeyColumns)
	roleNotificationTemplateInsertCacheMut       sync.RWMutex
	roleNotificationTemplateInsertCache          = make(map[string]insertCache)
	roleNotificationTemplateUpdateCacheMut       sync.RWMutex
	roleNotificationTemplateUpdateCache          = make(map[string]updateCache)
	roleNotificationTemplateUpsertCacheMut       sync.RWMutex
	roleNotificationTemplateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roleNotificationTemplateBeforeInsertHooks []RoleNotificationTemplateHook
var roleNotificationTemplateBeforeUpdateHooks []RoleNotificationTemplateHook
var roleNotificationTemplateBeforeDeleteHooks []RoleNotificationTemplateHook
var roleNotificationTemplateBeforeUpsertHooks []RoleNotificationTemplateHook

var roleNotificationTemplateAfterInsertHooks []RoleNotificationTemplateHook
var roleNotificationTemplateAfterSelectHooks []RoleNotificationTemplateHook
var roleNotificationTemplateAfterUpdateHooks []RoleNotificationTemplateHook
var roleNotificationTemplateAfterDeleteHooks []RoleNotificationTemplateHook
var roleNotificationTemplateAfterUpsertHooks []RoleNotificationTemplateHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoleNotificationTemplate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleNotificationTemplateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoleNotificationTemplate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleNotificationTemplateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoleNotificationTemplate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleNotificationTemplateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoleNotificationTemplate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleNotificationTemplateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoleNotificationTemplate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleNotificationTemplateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoleNotificationTemplate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleNotificationTemplateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoleNotificationTemplate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleNotificationTemplateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoleNotificationTemplate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleNotificationTemplateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoleNotificationTemplate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleNotificationTemplateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoleNotificationTemplateHook registers your hook function for all future operations.
func AddRoleNotificationTemplateHook(hookPoint boil.HookPoint, roleNotificationTemplateHook RoleNotificationTemplateHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		roleNotificationTemplateBeforeInsertHooks = append(roleNotificationTemplateBeforeInsertHooks, roleNotificationTemplateHook)
	case boil.BeforeUpdateHook:
		roleNotificationTemplateBeforeUpdateHooks = append(roleNotificationTemplateBeforeUpdateHooks, roleNotificationTemplateHook)
	case boil.BeforeDeleteHook:
		roleNotificationTemplateBeforeDeleteHooks = append(roleNotificationTemplateBeforeDeleteHooks, roleNotificationTemplateHook)
	case boil.BeforeUpsertHook:
		roleNotificationTemplateBeforeUpsertHooks = append(roleNotificationTemplateBeforeUpsertHooks, roleNotificationTemplateHook)
	case boil.AfterInsertHook:
		roleNotificationTemplateAfterInsertHooks = append(roleNotificationTemplateAfterInsertHooks, roleNotificationTemplateHook)
	case boil.AfterSelectHook:
		roleNotificationTemplateAfterSelectHooks = append(roleNotificationTemplateAfterSelectHooks, roleNotificationTemplateHook)
	case boil.AfterUpdateHook:
		roleNotificationTemplateAfterUpdateHooks = append(roleNotificationTemplateAfterUpdateHooks, roleNotificationTemplateHook)
	case boil.AfterDeleteHook:
		roleNotificationTemplateAfterDeleteHooks = append(roleNotificationTemplateAfterDeleteHooks, roleNotificationTemplateHook)
	case boil.AfterUpsertHook:
		roleNotificationTemplateAfterUpsertHooks = append(roleNotificationTemplateAfterUpsertHooks, roleNotificationTemplateHook)
	}
}

// One returns a single roleNotificationTemplate record from the query.
func (q roleNotificationTemplateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoleNotificationTemplate, error) {
	o := &RoleNotificationTemplate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_notification_templates")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RoleNotificationTemplate records from the query.
func (q roleNotificationTemplateQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoleNotificationTemplateSlice, error) {
	var o []*RoleNotificationTemplate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleNotificationTemplate slice")
	}

	if len(roleNotificationTemplateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RoleNotificationTemplate records in the query.
func (q roleNotificationTemplateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_notification_templates rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q roleNotificationTemplateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_notification_templates exists")
	}

	return count > 0, nil
}

// NotificationTemplate pointed to by the foreign key.
func (o *RoleNotificationTemplate) NotificationTemplate(mods ...qm.QueryMod) notificationTemplateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NotificationTemplateID),
	}

	queryMods = append(queryMods, mods...)

	query := NotificationTemplates(queryMods...)
	queries.SetFrom(query.Query, "\"notification_templates\"")

	return query
}

// Role pointed to by the foreign key.
func (o *RoleNotificationTemplate) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	query := Roles(queryMods...)
	queries.SetFrom(query.Query, "\"roles\"")

	return query
}

// LoadNotificationTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleNotificationTemplateL) LoadNotificationTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleNotificationTemplate interface{}, mods queries.Applicator) error {
	var slice []*RoleNotificationTemplate
	var object *RoleNotificationTemplate

	if singular {
		object = maybeRoleNotificationTemplate.(*RoleNotificationTemplate)
	} else {
		slice = *maybeRoleNotificationTemplate.(*[]*RoleNotificationTemplate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleNotificationTemplateR{}
		}
		args = append(args, object.NotificationTemplateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleNotificationTemplateR{}
			}

			for _, a := range args {
				if a == obj.NotificationTemplateID {
					continue Outer
				}
			}

			args = append(args, obj.NotificationTemplateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`notification_templates`), qm.WhereIn(`notification_templates.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NotificationTemplate")
	}

	var resultSlice []*NotificationTemplate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NotificationTemplate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for notification_templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notification_templates")
	}

	if len(roleNotificationTemplateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.NotificationTemplate = foreign
		if foreign.R == nil {
			foreign.R = &notificationTemplateR{}
		}
		foreign.R.RoleNotificationTemplates = append(foreign.R.RoleNotificationTemplates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NotificationTemplateID == foreign.ID {
				local.R.NotificationTemplate = foreign
				if foreign.R == nil {
					foreign.R = &notificationTemplateR{}
				}
				foreign.R.RoleNotificationTemplates = append(foreign.R.RoleNotificationTemplates, local)
				break
			}
		}
	}

	return nil
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleNotificationTemplateL) LoadRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleNotificationTemplate interface{}, mods queries.Applicator) error {
	var slice []*RoleNotificationTemplate
	var object *RoleNotificationTemplate

	if singular {
		object = maybeRoleNotificationTemplate.(*RoleNotificationTemplate)
	} else {
		slice = *maybeRoleNotificationTemplate.(*[]*RoleNotificationTemplate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleNotificationTemplateR{}
		}
		args = append(args, object.RoleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleNotificationTemplateR{}
			}

			for _, a := range args {
				if a == obj.RoleID {
					continue Outer
				}
			}

			args = append(args, obj.RoleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`roles`), qm.WhereIn(`roles.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleNotificationTemplateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.RoleNotificationTemplates = append(foreign.R.RoleNotificationTemplates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.ID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.RoleNotificationTemplates = append(foreign.R.RoleNotificationTemplates, local)
				break
			}
		}
	}

	return nil
}

// SetNotificationTemplate of the roleNotificationTemplate to the related item.
// Sets o.R.NotificationTemplate to related.
// Adds o to related.R.RoleNotificationTemplates.
func (o *RoleNotificationTemplate) SetNotificationTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NotificationTemplate) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_notification_templates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"notification_template_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleNotificationTemplatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.RoleID, o.NotificationTemplateID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NotificationTemplateID = related.ID
	if o.R == nil {
		o.R = &roleNotificationTemplateR{
			NotificationTemplate: related,
		}
	} else {
		o.R.NotificationTemplate = related
	}

	if related.R == nil {
		related.R = &notificationTemplateR{
			RoleNotificationTemplates: RoleNotificationTemplateSlice{o},
		}
	} else {
		related.R.RoleNotificationTemplates = append(related.R.RoleNotificationTemplates, o)
	}

	return nil
}

// SetRole of the roleNotificationTemplate to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.RoleNotificationTemplates.
func (o *RoleNotificationTemplate) SetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_notification_templates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleNotificationTemplatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.RoleID, o.NotificationTemplateID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.ID
	if o.R == nil {
		o.R = &roleNotificationTemplateR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			RoleNotificationTemplates: RoleNotificationTemplateSlice{o},
		}
	} else {
		related.R.RoleNotificationTemplates = append(related.R.RoleNotificationTemplates, o)
	}

	return nil
}

// RoleNotificationTemplates retrieves all the records using an executor.
func RoleNotificationTemplates(mods ...qm.QueryMod) roleNotificationTemplateQuery {
	mods = append(mods, qm.From("\"role_notification_templates\""))
	return roleNotificationTemplateQuery{NewQuery(mods...)}
}

// FindRoleNotificationTemplate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleNotificationTemplate(ctx context.Context, exec boil.ContextExecutor, roleID string, notificationTemplateID string, selectCols ...string) (*RoleNotificationTemplate, error) {
	roleNotificationTemplateObj := &RoleNotificationTemplate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_notification_templates\" where \"role_id\"=$1 AND \"notification_template_id\"=$2", sel,
	)

	q := queries.Raw(query, roleID, notificationTemplateID)

	err := q.Bind(ctx, exec, roleNotificationTemplateObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from role_notification_templates")
	}

	return roleNotificationTemplateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoleNotificationTemplate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_notification_templates provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleNotificationTemplateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roleNotificationTemplateInsertCacheMut.RLock()
	cache, cached := roleNotificationTemplateInsertCache[key]
	roleNotificationTemplateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roleNotificationTemplateAllColumns,
			roleNotificationTemplateColumnsWithDefault,
			roleNotificationTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roleNotificationTemplateType, roleNotificationTemplateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleNotificationTemplateType, roleNotificationTemplateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_notification_templates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_notification_templates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_notification_templates")
	}

	if !cached {
		roleNotificationTemplateInsertCacheMut.Lock()
		roleNotificationTemplateInsertCache[key] = cache
		roleNotificationTemplateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RoleNotificationTemplate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoleNotificationTemplate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roleNotificationTemplateUpdateCacheMut.RLock()
	cache, cached := roleNotificationTemplateUpdateCache[key]
	roleNotificationTemplateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roleNotificationTemplateAllColumns,
			roleNotificationTemplatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update role_notification_templates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_notification_templates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roleNotificationTemplatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleNotificationTemplateType, roleNotificationTemplateMapping, append(wl, roleNotificationTemplatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update role_notification_templates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for role_notification_templates")
	}

	if !cached {
		roleNotificationTemplateUpdateCacheMut.Lock()
		roleNotificationTemplateUpdateCache[key] = cache
		roleNotificationTemplateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q roleNotificationTemplateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for role_notification_templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for role_notification_templates")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleNotificationTemplateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleNotificationTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_notification_templates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roleNotificationTemplatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in roleNotificationTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all roleNotificationTemplate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoleNotificationTemplate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_notification_templates provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleNotificationTemplateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleNotificationTemplateUpsertCacheMut.RLock()
	cache, cached := roleNotificationTemplateUpsertCache[key]
	roleNotificationTemplateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			roleNotificationTemplateAllColumns,
			roleNotificationTemplateColumnsWithDefault,
			roleNotificationTemplateColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			roleNotificationTemplateAllColumns,
			roleNotificationTemplatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert role_notification_templates, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roleNotificationTemplatePrimaryKeyColumns))
			copy(conflict, roleNotificationTemplatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"role_notification_templates\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roleNotificationTemplateType, roleNotificationTemplateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleNotificationTemplateType, roleNotificationTemplateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert role_notification_templates")
	}

	if !cached {
		roleNotificationTemplateUpsertCacheMut.Lock()
		roleNotificationTemplateUpsertCache[key] = cache
		roleNotificationTemplateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RoleNotificationTemplate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleNotificationTemplate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoleNotificationTemplate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleNotificationTemplatePrimaryKeyMapping)
	sql := "DELETE FROM \"role_notification_templates\" WHERE \"role_id\"=$1 AND \"notification_template_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from role_notification_templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for role_notification_templates")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q roleNotificationTemplateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no roleNotificationTemplateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from role_notification_templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_notification_templates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleNotificationTemplateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roleNotificationTemplateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleNotificationTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_notification_templates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleNotificationTemplatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from roleNotificationTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_notification_templates")
	}

	if len(roleNotificationTemplateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleNotificationTemplate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoleNotificationTemplate(ctx, exec, o.RoleID, o.NotificationTemplateID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleNotificationTemplateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoleNotificationTemplateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleNotificationTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_notification_templates\".* FROM \"role_notification_templates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleNotificationTemplatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleNotificationTemplateSlice")
	}

	*o = slice

	return nil
}

// RoleNotificationTemplateExists checks if the RoleNotificationTemplate row exists.
func RoleNotificationTemplateExists(ctx context.Context, exec boil.ContextExecutor, roleID string, notificationTemplateID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_notification_templates\" where \"role_id\"=$1 AND \"notification_template_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, roleID, notificationTemplateID)
	}
	row := exec.QueryRowContext(ctx, sql, roleID, notificationTemplateID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_notification_templates exists")
	}

	return exists, nil
}
