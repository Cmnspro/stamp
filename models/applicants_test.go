// Code generated by SQLBoiler 4.0.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testApplicants(t *testing.T) {
	t.Parallel()

	query := Applicants()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testApplicantsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Applicants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApplicantsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Applicants().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Applicants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApplicantsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ApplicantSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Applicants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApplicantsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ApplicantExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Applicant exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ApplicantExists to return true, but got false.")
	}
}

func testApplicantsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	applicantFound, err := FindApplicant(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if applicantFound == nil {
		t.Error("want a record, got nil")
	}
}

func testApplicantsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Applicants().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testApplicantsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Applicants().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testApplicantsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicantOne := &Applicant{}
	applicantTwo := &Applicant{}
	if err = randomize.Struct(seed, applicantOne, applicantDBTypes, false, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}
	if err = randomize.Struct(seed, applicantTwo, applicantDBTypes, false, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = applicantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = applicantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Applicants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testApplicantsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	applicantOne := &Applicant{}
	applicantTwo := &Applicant{}
	if err = randomize.Struct(seed, applicantOne, applicantDBTypes, false, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}
	if err = randomize.Struct(seed, applicantTwo, applicantDBTypes, false, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = applicantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = applicantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Applicants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testApplicantsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Applicants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testApplicantsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(applicantColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Applicants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testApplicantToManyApplicantTags(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Applicant
	var b, c ApplicantTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, applicantTagDBTypes, false, applicantTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, applicantTagDBTypes, false, applicantTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ApplicantID = a.ID
	c.ApplicantID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ApplicantTags().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ApplicantID == b.ApplicantID {
			bFound = true
		}
		if v.ApplicantID == c.ApplicantID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ApplicantSlice{&a}
	if err = a.L.LoadApplicantTags(ctx, tx, false, (*[]*Applicant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ApplicantTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ApplicantTags = nil
	if err = a.L.LoadApplicantTags(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ApplicantTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testApplicantToManyApplicationStateTransitions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Applicant
	var b, c ApplicationStateTransition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, applicationStateTransitionDBTypes, false, applicationStateTransitionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, applicationStateTransitionDBTypes, false, applicationStateTransitionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ApplicantID = a.ID
	c.ApplicantID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ApplicationStateTransitions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ApplicantID == b.ApplicantID {
			bFound = true
		}
		if v.ApplicantID == c.ApplicantID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ApplicantSlice{&a}
	if err = a.L.LoadApplicationStateTransitions(ctx, tx, false, (*[]*Applicant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ApplicationStateTransitions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ApplicationStateTransitions = nil
	if err = a.L.LoadApplicationStateTransitions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ApplicationStateTransitions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testApplicantToManyAddOpApplicantTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Applicant
	var b, c, d, e ApplicantTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, applicantDBTypes, false, strmangle.SetComplement(applicantPrimaryKeyColumns, applicantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ApplicantTag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, applicantTagDBTypes, false, strmangle.SetComplement(applicantTagPrimaryKeyColumns, applicantTagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ApplicantTag{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddApplicantTags(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ApplicantID {
			t.Error("foreign key was wrong value", a.ID, first.ApplicantID)
		}
		if a.ID != second.ApplicantID {
			t.Error("foreign key was wrong value", a.ID, second.ApplicantID)
		}

		if first.R.Applicant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Applicant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ApplicantTags[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ApplicantTags[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ApplicantTags().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testApplicantToManyAddOpApplicationStateTransitions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Applicant
	var b, c, d, e ApplicationStateTransition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, applicantDBTypes, false, strmangle.SetComplement(applicantPrimaryKeyColumns, applicantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ApplicationStateTransition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, applicationStateTransitionDBTypes, false, strmangle.SetComplement(applicationStateTransitionPrimaryKeyColumns, applicationStateTransitionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ApplicationStateTransition{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddApplicationStateTransitions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ApplicantID {
			t.Error("foreign key was wrong value", a.ID, first.ApplicantID)
		}
		if a.ID != second.ApplicantID {
			t.Error("foreign key was wrong value", a.ID, second.ApplicantID)
		}

		if first.R.Applicant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Applicant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ApplicationStateTransitions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ApplicationStateTransitions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ApplicationStateTransitions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testApplicantToOneApplicationStateUsingApplicationState(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Applicant
	var foreign ApplicationState

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, applicantDBTypes, false, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, applicationStateDBTypes, false, applicationStateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationState struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ApplicationStateID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ApplicationState().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ApplicantSlice{&local}
	if err = local.L.LoadApplicationState(ctx, tx, false, (*[]*Applicant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ApplicationState == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ApplicationState = nil
	if err = local.L.LoadApplicationState(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ApplicationState == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testApplicantToOneSetOpApplicationStateUsingApplicationState(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Applicant
	var b, c ApplicationState

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, applicantDBTypes, false, strmangle.SetComplement(applicantPrimaryKeyColumns, applicantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, applicationStateDBTypes, false, strmangle.SetComplement(applicationStatePrimaryKeyColumns, applicationStateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, applicationStateDBTypes, false, strmangle.SetComplement(applicationStatePrimaryKeyColumns, applicationStateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ApplicationState{&b, &c} {
		err = a.SetApplicationState(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ApplicationState != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Applicants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ApplicationStateID != x.ID {
			t.Error("foreign key was wrong value", a.ApplicationStateID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ApplicationStateID))
		reflect.Indirect(reflect.ValueOf(&a.ApplicationStateID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ApplicationStateID != x.ID {
			t.Error("foreign key was wrong value", a.ApplicationStateID, x.ID)
		}
	}
}

func testApplicantsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testApplicantsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ApplicantSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testApplicantsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Applicants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	applicantDBTypes = map[string]string{`ID`: `uuid`, `ApplicationStateID`: `uuid`, `Name`: `text`, `Email`: `text`, `JobCategory`: `text`, `PreviousProjects`: `text`, `StartDate`: `date`, `WorkHours`: `real`, `Salary`: `real`, `Device`: `text`, `Discovery`: `text`, `ResumeURL`: `text`, `OptionalFiles`: `ARRAYtext`, `GDPRAccepted`: `boolean`, `LastChange`: `date`, `Seniority`: `text`, `FirstInterview`: `date`, `SecondInterview`: `date`, `Notes`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                = bytes.MinRead
)

func testApplicantsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(applicantPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(applicantAllColumns) == len(applicantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Applicants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testApplicantsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(applicantAllColumns) == len(applicantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Applicant{}
	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Applicants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, applicantDBTypes, true, applicantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(applicantAllColumns, applicantPrimaryKeyColumns) {
		fields = applicantAllColumns
	} else {
		fields = strmangle.SetComplement(
			applicantAllColumns,
			applicantPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ApplicantSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testApplicantsUpsert(t *testing.T) {
	t.Parallel()

	if len(applicantAllColumns) == len(applicantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Applicant{}
	if err = randomize.Struct(seed, &o, applicantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Applicant: %s", err)
	}

	count, err := Applicants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, applicantDBTypes, false, applicantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Applicant struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Applicant: %s", err)
	}

	count, err = Applicants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
