// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AccessTokens", testAccessTokens)
	t.Run("AppUserProfiles", testAppUserProfiles)
	t.Run("ApplicantTags", testApplicantTags)
	t.Run("Applicants", testApplicants)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitions)
	t.Run("ApplicationStates", testApplicationStates)
	t.Run("NotificationTemplates", testNotificationTemplates)
	t.Run("PasswordResetTokens", testPasswordResetTokens)
	t.Run("Permissions", testPermissions)
	t.Run("RefreshTokens", testRefreshTokens)
	t.Run("RoleApplicationStates", testRoleApplicationStates)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplates)
	t.Run("Roles", testRoles)
	t.Run("Tags", testTags)
	t.Run("UserPermissions", testUserPermissions)
	t.Run("UserRoles", testUserRoles)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensDelete)
	t.Run("AppUserProfiles", testAppUserProfilesDelete)
	t.Run("ApplicantTags", testApplicantTagsDelete)
	t.Run("Applicants", testApplicantsDelete)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsDelete)
	t.Run("ApplicationStates", testApplicationStatesDelete)
	t.Run("NotificationTemplates", testNotificationTemplatesDelete)
	t.Run("PasswordResetTokens", testPasswordResetTokensDelete)
	t.Run("Permissions", testPermissionsDelete)
	t.Run("RefreshTokens", testRefreshTokensDelete)
	t.Run("RoleApplicationStates", testRoleApplicationStatesDelete)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("Tags", testTagsDelete)
	t.Run("UserPermissions", testUserPermissionsDelete)
	t.Run("UserRoles", testUserRolesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensQueryDeleteAll)
	t.Run("AppUserProfiles", testAppUserProfilesQueryDeleteAll)
	t.Run("ApplicantTags", testApplicantTagsQueryDeleteAll)
	t.Run("Applicants", testApplicantsQueryDeleteAll)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsQueryDeleteAll)
	t.Run("ApplicationStates", testApplicationStatesQueryDeleteAll)
	t.Run("NotificationTemplates", testNotificationTemplatesQueryDeleteAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensQueryDeleteAll)
	t.Run("Permissions", testPermissionsQueryDeleteAll)
	t.Run("RefreshTokens", testRefreshTokensQueryDeleteAll)
	t.Run("RoleApplicationStates", testRoleApplicationStatesQueryDeleteAll)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("Tags", testTagsQueryDeleteAll)
	t.Run("UserPermissions", testUserPermissionsQueryDeleteAll)
	t.Run("UserRoles", testUserRolesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensSliceDeleteAll)
	t.Run("AppUserProfiles", testAppUserProfilesSliceDeleteAll)
	t.Run("ApplicantTags", testApplicantTagsSliceDeleteAll)
	t.Run("Applicants", testApplicantsSliceDeleteAll)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsSliceDeleteAll)
	t.Run("ApplicationStates", testApplicationStatesSliceDeleteAll)
	t.Run("NotificationTemplates", testNotificationTemplatesSliceDeleteAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensSliceDeleteAll)
	t.Run("Permissions", testPermissionsSliceDeleteAll)
	t.Run("RefreshTokens", testRefreshTokensSliceDeleteAll)
	t.Run("RoleApplicationStates", testRoleApplicationStatesSliceDeleteAll)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("Tags", testTagsSliceDeleteAll)
	t.Run("UserPermissions", testUserPermissionsSliceDeleteAll)
	t.Run("UserRoles", testUserRolesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensExists)
	t.Run("AppUserProfiles", testAppUserProfilesExists)
	t.Run("ApplicantTags", testApplicantTagsExists)
	t.Run("Applicants", testApplicantsExists)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsExists)
	t.Run("ApplicationStates", testApplicationStatesExists)
	t.Run("NotificationTemplates", testNotificationTemplatesExists)
	t.Run("PasswordResetTokens", testPasswordResetTokensExists)
	t.Run("Permissions", testPermissionsExists)
	t.Run("RefreshTokens", testRefreshTokensExists)
	t.Run("RoleApplicationStates", testRoleApplicationStatesExists)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesExists)
	t.Run("Roles", testRolesExists)
	t.Run("Tags", testTagsExists)
	t.Run("UserPermissions", testUserPermissionsExists)
	t.Run("UserRoles", testUserRolesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensFind)
	t.Run("AppUserProfiles", testAppUserProfilesFind)
	t.Run("ApplicantTags", testApplicantTagsFind)
	t.Run("Applicants", testApplicantsFind)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsFind)
	t.Run("ApplicationStates", testApplicationStatesFind)
	t.Run("NotificationTemplates", testNotificationTemplatesFind)
	t.Run("PasswordResetTokens", testPasswordResetTokensFind)
	t.Run("Permissions", testPermissionsFind)
	t.Run("RefreshTokens", testRefreshTokensFind)
	t.Run("RoleApplicationStates", testRoleApplicationStatesFind)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesFind)
	t.Run("Roles", testRolesFind)
	t.Run("Tags", testTagsFind)
	t.Run("UserPermissions", testUserPermissionsFind)
	t.Run("UserRoles", testUserRolesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensBind)
	t.Run("AppUserProfiles", testAppUserProfilesBind)
	t.Run("ApplicantTags", testApplicantTagsBind)
	t.Run("Applicants", testApplicantsBind)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsBind)
	t.Run("ApplicationStates", testApplicationStatesBind)
	t.Run("NotificationTemplates", testNotificationTemplatesBind)
	t.Run("PasswordResetTokens", testPasswordResetTokensBind)
	t.Run("Permissions", testPermissionsBind)
	t.Run("RefreshTokens", testRefreshTokensBind)
	t.Run("RoleApplicationStates", testRoleApplicationStatesBind)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesBind)
	t.Run("Roles", testRolesBind)
	t.Run("Tags", testTagsBind)
	t.Run("UserPermissions", testUserPermissionsBind)
	t.Run("UserRoles", testUserRolesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensOne)
	t.Run("AppUserProfiles", testAppUserProfilesOne)
	t.Run("ApplicantTags", testApplicantTagsOne)
	t.Run("Applicants", testApplicantsOne)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsOne)
	t.Run("ApplicationStates", testApplicationStatesOne)
	t.Run("NotificationTemplates", testNotificationTemplatesOne)
	t.Run("PasswordResetTokens", testPasswordResetTokensOne)
	t.Run("Permissions", testPermissionsOne)
	t.Run("RefreshTokens", testRefreshTokensOne)
	t.Run("RoleApplicationStates", testRoleApplicationStatesOne)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesOne)
	t.Run("Roles", testRolesOne)
	t.Run("Tags", testTagsOne)
	t.Run("UserPermissions", testUserPermissionsOne)
	t.Run("UserRoles", testUserRolesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensAll)
	t.Run("AppUserProfiles", testAppUserProfilesAll)
	t.Run("ApplicantTags", testApplicantTagsAll)
	t.Run("Applicants", testApplicantsAll)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsAll)
	t.Run("ApplicationStates", testApplicationStatesAll)
	t.Run("NotificationTemplates", testNotificationTemplatesAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensAll)
	t.Run("Permissions", testPermissionsAll)
	t.Run("RefreshTokens", testRefreshTokensAll)
	t.Run("RoleApplicationStates", testRoleApplicationStatesAll)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesAll)
	t.Run("Roles", testRolesAll)
	t.Run("Tags", testTagsAll)
	t.Run("UserPermissions", testUserPermissionsAll)
	t.Run("UserRoles", testUserRolesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensCount)
	t.Run("AppUserProfiles", testAppUserProfilesCount)
	t.Run("ApplicantTags", testApplicantTagsCount)
	t.Run("Applicants", testApplicantsCount)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsCount)
	t.Run("ApplicationStates", testApplicationStatesCount)
	t.Run("NotificationTemplates", testNotificationTemplatesCount)
	t.Run("PasswordResetTokens", testPasswordResetTokensCount)
	t.Run("Permissions", testPermissionsCount)
	t.Run("RefreshTokens", testRefreshTokensCount)
	t.Run("RoleApplicationStates", testRoleApplicationStatesCount)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesCount)
	t.Run("Roles", testRolesCount)
	t.Run("Tags", testTagsCount)
	t.Run("UserPermissions", testUserPermissionsCount)
	t.Run("UserRoles", testUserRolesCount)
	t.Run("Users", testUsersCount)
}

func TestInsert(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensInsert)
	t.Run("AccessTokens", testAccessTokensInsertWhitelist)
	t.Run("AppUserProfiles", testAppUserProfilesInsert)
	t.Run("AppUserProfiles", testAppUserProfilesInsertWhitelist)
	t.Run("ApplicantTags", testApplicantTagsInsert)
	t.Run("ApplicantTags", testApplicantTagsInsertWhitelist)
	t.Run("Applicants", testApplicantsInsert)
	t.Run("Applicants", testApplicantsInsertWhitelist)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsInsert)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsInsertWhitelist)
	t.Run("ApplicationStates", testApplicationStatesInsert)
	t.Run("ApplicationStates", testApplicationStatesInsertWhitelist)
	t.Run("NotificationTemplates", testNotificationTemplatesInsert)
	t.Run("NotificationTemplates", testNotificationTemplatesInsertWhitelist)
	t.Run("PasswordResetTokens", testPasswordResetTokensInsert)
	t.Run("PasswordResetTokens", testPasswordResetTokensInsertWhitelist)
	t.Run("Permissions", testPermissionsInsert)
	t.Run("Permissions", testPermissionsInsertWhitelist)
	t.Run("RefreshTokens", testRefreshTokensInsert)
	t.Run("RefreshTokens", testRefreshTokensInsertWhitelist)
	t.Run("RoleApplicationStates", testRoleApplicationStatesInsert)
	t.Run("RoleApplicationStates", testRoleApplicationStatesInsertWhitelist)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesInsert)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
	t.Run("UserPermissions", testUserPermissionsInsert)
	t.Run("UserPermissions", testUserPermissionsInsertWhitelist)
	t.Run("UserRoles", testUserRolesInsert)
	t.Run("UserRoles", testUserRolesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AccessTokenToUserUsingUser", testAccessTokenToOneUserUsingUser)
	t.Run("AppUserProfileToUserUsingUser", testAppUserProfileToOneUserUsingUser)
	t.Run("ApplicantTagToApplicantUsingApplicant", testApplicantTagToOneApplicantUsingApplicant)
	t.Run("ApplicantTagToTagUsingTag", testApplicantTagToOneTagUsingTag)
	t.Run("ApplicantToApplicationStateUsingApplicationState", testApplicantToOneApplicationStateUsingApplicationState)
	t.Run("ApplicationStateTransitionToApplicantUsingApplicant", testApplicationStateTransitionToOneApplicantUsingApplicant)
	t.Run("ApplicationStateTransitionToApplicationStateUsingFromApplicationState", testApplicationStateTransitionToOneApplicationStateUsingFromApplicationState)
	t.Run("ApplicationStateTransitionToApplicationStateUsingToApplicationState", testApplicationStateTransitionToOneApplicationStateUsingToApplicationState)
	t.Run("PasswordResetTokenToUserUsingUser", testPasswordResetTokenToOneUserUsingUser)
	t.Run("RefreshTokenToUserUsingUser", testRefreshTokenToOneUserUsingUser)
	t.Run("RoleApplicationStateToApplicationStateUsingApplicationState", testRoleApplicationStateToOneApplicationStateUsingApplicationState)
	t.Run("RoleApplicationStateToRoleUsingRole", testRoleApplicationStateToOneRoleUsingRole)
	t.Run("RoleNotificationTemplateToNotificationTemplateUsingNotificationTemplate", testRoleNotificationTemplateToOneNotificationTemplateUsingNotificationTemplate)
	t.Run("RoleNotificationTemplateToRoleUsingRole", testRoleNotificationTemplateToOneRoleUsingRole)
	t.Run("UserPermissionToPermissionUsingPermission", testUserPermissionToOnePermissionUsingPermission)
	t.Run("UserPermissionToUserUsingUser", testUserPermissionToOneUserUsingUser)
	t.Run("UserRoleToRoleUsingRole", testUserRoleToOneRoleUsingRole)
	t.Run("UserRoleToUserUsingUser", testUserRoleToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("UserToAppUserProfileUsingAppUserProfile", testUserOneToOneAppUserProfileUsingAppUserProfile)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ApplicantToApplicantTags", testApplicantToManyApplicantTags)
	t.Run("ApplicantToApplicationStateTransitions", testApplicantToManyApplicationStateTransitions)
	t.Run("ApplicationStateToApplicants", testApplicationStateToManyApplicants)
	t.Run("ApplicationStateToFromApplicationStateApplicationStateTransitions", testApplicationStateToManyFromApplicationStateApplicationStateTransitions)
	t.Run("ApplicationStateToToApplicationStateApplicationStateTransitions", testApplicationStateToManyToApplicationStateApplicationStateTransitions)
	t.Run("ApplicationStateToRoleApplicationStates", testApplicationStateToManyRoleApplicationStates)
	t.Run("NotificationTemplateToRoleNotificationTemplates", testNotificationTemplateToManyRoleNotificationTemplates)
	t.Run("PermissionToUserPermissions", testPermissionToManyUserPermissions)
	t.Run("RoleToRoleApplicationStates", testRoleToManyRoleApplicationStates)
	t.Run("RoleToRoleNotificationTemplates", testRoleToManyRoleNotificationTemplates)
	t.Run("RoleToUserRoles", testRoleToManyUserRoles)
	t.Run("TagToApplicantTags", testTagToManyApplicantTags)
	t.Run("UserToAccessTokens", testUserToManyAccessTokens)
	t.Run("UserToPasswordResetTokens", testUserToManyPasswordResetTokens)
	t.Run("UserToRefreshTokens", testUserToManyRefreshTokens)
	t.Run("UserToUserPermissions", testUserToManyUserPermissions)
	t.Run("UserToUserRoles", testUserToManyUserRoles)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AccessTokenToUserUsingAccessTokens", testAccessTokenToOneSetOpUserUsingUser)
	t.Run("AppUserProfileToUserUsingAppUserProfile", testAppUserProfileToOneSetOpUserUsingUser)
	t.Run("ApplicantTagToApplicantUsingApplicantTags", testApplicantTagToOneSetOpApplicantUsingApplicant)
	t.Run("ApplicantTagToTagUsingApplicantTags", testApplicantTagToOneSetOpTagUsingTag)
	t.Run("ApplicantToApplicationStateUsingApplicants", testApplicantToOneSetOpApplicationStateUsingApplicationState)
	t.Run("ApplicationStateTransitionToApplicantUsingApplicationStateTransitions", testApplicationStateTransitionToOneSetOpApplicantUsingApplicant)
	t.Run("ApplicationStateTransitionToApplicationStateUsingFromApplicationStateApplicationStateTransitions", testApplicationStateTransitionToOneSetOpApplicationStateUsingFromApplicationState)
	t.Run("ApplicationStateTransitionToApplicationStateUsingToApplicationStateApplicationStateTransitions", testApplicationStateTransitionToOneSetOpApplicationStateUsingToApplicationState)
	t.Run("PasswordResetTokenToUserUsingPasswordResetTokens", testPasswordResetTokenToOneSetOpUserUsingUser)
	t.Run("RefreshTokenToUserUsingRefreshTokens", testRefreshTokenToOneSetOpUserUsingUser)
	t.Run("RoleApplicationStateToApplicationStateUsingRoleApplicationStates", testRoleApplicationStateToOneSetOpApplicationStateUsingApplicationState)
	t.Run("RoleApplicationStateToRoleUsingRoleApplicationStates", testRoleApplicationStateToOneSetOpRoleUsingRole)
	t.Run("RoleNotificationTemplateToNotificationTemplateUsingRoleNotificationTemplates", testRoleNotificationTemplateToOneSetOpNotificationTemplateUsingNotificationTemplate)
	t.Run("RoleNotificationTemplateToRoleUsingRoleNotificationTemplates", testRoleNotificationTemplateToOneSetOpRoleUsingRole)
	t.Run("UserPermissionToPermissionUsingUserPermissions", testUserPermissionToOneSetOpPermissionUsingPermission)
	t.Run("UserPermissionToUserUsingUserPermissions", testUserPermissionToOneSetOpUserUsingUser)
	t.Run("UserRoleToRoleUsingUserRoles", testUserRoleToOneSetOpRoleUsingRole)
	t.Run("UserRoleToUserUsingUserRoles", testUserRoleToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("UserToAppUserProfileUsingAppUserProfile", testUserOneToOneSetOpAppUserProfileUsingAppUserProfile)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ApplicantToApplicantTags", testApplicantToManyAddOpApplicantTags)
	t.Run("ApplicantToApplicationStateTransitions", testApplicantToManyAddOpApplicationStateTransitions)
	t.Run("ApplicationStateToApplicants", testApplicationStateToManyAddOpApplicants)
	t.Run("ApplicationStateToFromApplicationStateApplicationStateTransitions", testApplicationStateToManyAddOpFromApplicationStateApplicationStateTransitions)
	t.Run("ApplicationStateToToApplicationStateApplicationStateTransitions", testApplicationStateToManyAddOpToApplicationStateApplicationStateTransitions)
	t.Run("ApplicationStateToRoleApplicationStates", testApplicationStateToManyAddOpRoleApplicationStates)
	t.Run("NotificationTemplateToRoleNotificationTemplates", testNotificationTemplateToManyAddOpRoleNotificationTemplates)
	t.Run("PermissionToUserPermissions", testPermissionToManyAddOpUserPermissions)
	t.Run("RoleToRoleApplicationStates", testRoleToManyAddOpRoleApplicationStates)
	t.Run("RoleToRoleNotificationTemplates", testRoleToManyAddOpRoleNotificationTemplates)
	t.Run("RoleToUserRoles", testRoleToManyAddOpUserRoles)
	t.Run("TagToApplicantTags", testTagToManyAddOpApplicantTags)
	t.Run("UserToAccessTokens", testUserToManyAddOpAccessTokens)
	t.Run("UserToPasswordResetTokens", testUserToManyAddOpPasswordResetTokens)
	t.Run("UserToRefreshTokens", testUserToManyAddOpRefreshTokens)
	t.Run("UserToUserPermissions", testUserToManyAddOpUserPermissions)
	t.Run("UserToUserRoles", testUserToManyAddOpUserRoles)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensReload)
	t.Run("AppUserProfiles", testAppUserProfilesReload)
	t.Run("ApplicantTags", testApplicantTagsReload)
	t.Run("Applicants", testApplicantsReload)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsReload)
	t.Run("ApplicationStates", testApplicationStatesReload)
	t.Run("NotificationTemplates", testNotificationTemplatesReload)
	t.Run("PasswordResetTokens", testPasswordResetTokensReload)
	t.Run("Permissions", testPermissionsReload)
	t.Run("RefreshTokens", testRefreshTokensReload)
	t.Run("RoleApplicationStates", testRoleApplicationStatesReload)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesReload)
	t.Run("Roles", testRolesReload)
	t.Run("Tags", testTagsReload)
	t.Run("UserPermissions", testUserPermissionsReload)
	t.Run("UserRoles", testUserRolesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensReloadAll)
	t.Run("AppUserProfiles", testAppUserProfilesReloadAll)
	t.Run("ApplicantTags", testApplicantTagsReloadAll)
	t.Run("Applicants", testApplicantsReloadAll)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsReloadAll)
	t.Run("ApplicationStates", testApplicationStatesReloadAll)
	t.Run("NotificationTemplates", testNotificationTemplatesReloadAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensReloadAll)
	t.Run("Permissions", testPermissionsReloadAll)
	t.Run("RefreshTokens", testRefreshTokensReloadAll)
	t.Run("RoleApplicationStates", testRoleApplicationStatesReloadAll)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("Tags", testTagsReloadAll)
	t.Run("UserPermissions", testUserPermissionsReloadAll)
	t.Run("UserRoles", testUserRolesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensSelect)
	t.Run("AppUserProfiles", testAppUserProfilesSelect)
	t.Run("ApplicantTags", testApplicantTagsSelect)
	t.Run("Applicants", testApplicantsSelect)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsSelect)
	t.Run("ApplicationStates", testApplicationStatesSelect)
	t.Run("NotificationTemplates", testNotificationTemplatesSelect)
	t.Run("PasswordResetTokens", testPasswordResetTokensSelect)
	t.Run("Permissions", testPermissionsSelect)
	t.Run("RefreshTokens", testRefreshTokensSelect)
	t.Run("RoleApplicationStates", testRoleApplicationStatesSelect)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("Tags", testTagsSelect)
	t.Run("UserPermissions", testUserPermissionsSelect)
	t.Run("UserRoles", testUserRolesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensUpdate)
	t.Run("AppUserProfiles", testAppUserProfilesUpdate)
	t.Run("ApplicantTags", testApplicantTagsUpdate)
	t.Run("Applicants", testApplicantsUpdate)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsUpdate)
	t.Run("ApplicationStates", testApplicationStatesUpdate)
	t.Run("NotificationTemplates", testNotificationTemplatesUpdate)
	t.Run("PasswordResetTokens", testPasswordResetTokensUpdate)
	t.Run("Permissions", testPermissionsUpdate)
	t.Run("RefreshTokens", testRefreshTokensUpdate)
	t.Run("RoleApplicationStates", testRoleApplicationStatesUpdate)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("Tags", testTagsUpdate)
	t.Run("UserPermissions", testUserPermissionsUpdate)
	t.Run("UserRoles", testUserRolesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensSliceUpdateAll)
	t.Run("AppUserProfiles", testAppUserProfilesSliceUpdateAll)
	t.Run("ApplicantTags", testApplicantTagsSliceUpdateAll)
	t.Run("Applicants", testApplicantsSliceUpdateAll)
	t.Run("ApplicationStateTransitions", testApplicationStateTransitionsSliceUpdateAll)
	t.Run("ApplicationStates", testApplicationStatesSliceUpdateAll)
	t.Run("NotificationTemplates", testNotificationTemplatesSliceUpdateAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensSliceUpdateAll)
	t.Run("Permissions", testPermissionsSliceUpdateAll)
	t.Run("RefreshTokens", testRefreshTokensSliceUpdateAll)
	t.Run("RoleApplicationStates", testRoleApplicationStatesSliceUpdateAll)
	t.Run("RoleNotificationTemplates", testRoleNotificationTemplatesSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("Tags", testTagsSliceUpdateAll)
	t.Run("UserPermissions", testUserPermissionsSliceUpdateAll)
	t.Run("UserRoles", testUserRolesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
