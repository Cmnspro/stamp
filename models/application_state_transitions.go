// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ApplicationStateTransition is an object representing the database table.
type ApplicationStateTransition struct {
	ApplicantID            string    `boil:"applicant_id" json:"applicant_id" toml:"applicant_id" yaml:"applicant_id"`
	FromApplicationStateID string    `boil:"from_application_state_id" json:"from_application_state_id" toml:"from_application_state_id" yaml:"from_application_state_id"`
	ToApplicationStateID   string    `boil:"to_application_state_id" json:"to_application_state_id" toml:"to_application_state_id" yaml:"to_application_state_id"`
	CreatedAt              time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt              time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *applicationStateTransitionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L applicationStateTransitionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ApplicationStateTransitionColumns = struct {
	ApplicantID            string
	FromApplicationStateID string
	ToApplicationStateID   string
	CreatedAt              string
	UpdatedAt              string
}{
	ApplicantID:            "applicant_id",
	FromApplicationStateID: "from_application_state_id",
	ToApplicationStateID:   "to_application_state_id",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
}

// Generated where

var ApplicationStateTransitionWhere = struct {
	ApplicantID            whereHelperstring
	FromApplicationStateID whereHelperstring
	ToApplicationStateID   whereHelperstring
	CreatedAt              whereHelpertime_Time
	UpdatedAt              whereHelpertime_Time
}{
	ApplicantID:            whereHelperstring{field: "\"application_state_transitions\".\"applicant_id\""},
	FromApplicationStateID: whereHelperstring{field: "\"application_state_transitions\".\"from_application_state_id\""},
	ToApplicationStateID:   whereHelperstring{field: "\"application_state_transitions\".\"to_application_state_id\""},
	CreatedAt:              whereHelpertime_Time{field: "\"application_state_transitions\".\"created_at\""},
	UpdatedAt:              whereHelpertime_Time{field: "\"application_state_transitions\".\"updated_at\""},
}

// ApplicationStateTransitionRels is where relationship names are stored.
var ApplicationStateTransitionRels = struct {
	Applicant            string
	FromApplicationState string
	ToApplicationState   string
}{
	Applicant:            "Applicant",
	FromApplicationState: "FromApplicationState",
	ToApplicationState:   "ToApplicationState",
}

// applicationStateTransitionR is where relationships are stored.
type applicationStateTransitionR struct {
	Applicant            *Applicant
	FromApplicationState *ApplicationState
	ToApplicationState   *ApplicationState
}

// NewStruct creates a new relationship struct
func (*applicationStateTransitionR) NewStruct() *applicationStateTransitionR {
	return &applicationStateTransitionR{}
}

// applicationStateTransitionL is where Load methods for each relationship are stored.
type applicationStateTransitionL struct{}

var (
	applicationStateTransitionAllColumns            = []string{"applicant_id", "from_application_state_id", "to_application_state_id", "created_at", "updated_at"}
	applicationStateTransitionColumnsWithoutDefault = []string{"applicant_id", "from_application_state_id", "to_application_state_id", "created_at", "updated_at"}
	applicationStateTransitionColumnsWithDefault    = []string{}
	applicationStateTransitionPrimaryKeyColumns     = []string{"applicant_id", "from_application_state_id", "to_application_state_id"}
)

type (
	// ApplicationStateTransitionSlice is an alias for a slice of pointers to ApplicationStateTransition.
	// This should generally be used opposed to []ApplicationStateTransition.
	ApplicationStateTransitionSlice []*ApplicationStateTransition

	applicationStateTransitionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	applicationStateTransitionType                 = reflect.TypeOf(&ApplicationStateTransition{})
	applicationStateTransitionMapping              = queries.MakeStructMapping(applicationStateTransitionType)
	applicationStateTransitionPrimaryKeyMapping, _ = queries.BindMapping(applicationStateTransitionType, applicationStateTransitionMapping, applicationStateTransitionPrimaryKeyColumns)
	applicationStateTransitionInsertCacheMut       sync.RWMutex
	applicationStateTransitionInsertCache          = make(map[string]insertCache)
	applicationStateTransitionUpdateCacheMut       sync.RWMutex
	applicationStateTransitionUpdateCache          = make(map[string]updateCache)
	applicationStateTransitionUpsertCacheMut       sync.RWMutex
	applicationStateTransitionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single applicationStateTransition record from the query.
func (q applicationStateTransitionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ApplicationStateTransition, error) {
	o := &ApplicationStateTransition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for application_state_transitions")
	}

	return o, nil
}

// All returns all ApplicationStateTransition records from the query.
func (q applicationStateTransitionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ApplicationStateTransitionSlice, error) {
	var o []*ApplicationStateTransition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ApplicationStateTransition slice")
	}

	return o, nil
}

// Count returns the count of all ApplicationStateTransition records in the query.
func (q applicationStateTransitionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count application_state_transitions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q applicationStateTransitionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if application_state_transitions exists")
	}

	return count > 0, nil
}

// Applicant pointed to by the foreign key.
func (o *ApplicationStateTransition) Applicant(mods ...qm.QueryMod) applicantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ApplicantID),
	}

	queryMods = append(queryMods, mods...)

	query := Applicants(queryMods...)
	queries.SetFrom(query.Query, "\"applicants\"")

	return query
}

// FromApplicationState pointed to by the foreign key.
func (o *ApplicationStateTransition) FromApplicationState(mods ...qm.QueryMod) applicationStateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FromApplicationStateID),
	}

	queryMods = append(queryMods, mods...)

	query := ApplicationStates(queryMods...)
	queries.SetFrom(query.Query, "\"application_states\"")

	return query
}

// ToApplicationState pointed to by the foreign key.
func (o *ApplicationStateTransition) ToApplicationState(mods ...qm.QueryMod) applicationStateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ToApplicationStateID),
	}

	queryMods = append(queryMods, mods...)

	query := ApplicationStates(queryMods...)
	queries.SetFrom(query.Query, "\"application_states\"")

	return query
}

// LoadApplicant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (applicationStateTransitionL) LoadApplicant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApplicationStateTransition interface{}, mods queries.Applicator) error {
	var slice []*ApplicationStateTransition
	var object *ApplicationStateTransition

	if singular {
		object = maybeApplicationStateTransition.(*ApplicationStateTransition)
	} else {
		slice = *maybeApplicationStateTransition.(*[]*ApplicationStateTransition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &applicationStateTransitionR{}
		}
		args = append(args, object.ApplicantID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &applicationStateTransitionR{}
			}

			for _, a := range args {
				if a == obj.ApplicantID {
					continue Outer
				}
			}

			args = append(args, obj.ApplicantID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`applicants`), qm.WhereIn(`applicants.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Applicant")
	}

	var resultSlice []*Applicant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Applicant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for applicants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for applicants")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Applicant = foreign
		if foreign.R == nil {
			foreign.R = &applicantR{}
		}
		foreign.R.ApplicationStateTransitions = append(foreign.R.ApplicationStateTransitions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ApplicantID == foreign.ID {
				local.R.Applicant = foreign
				if foreign.R == nil {
					foreign.R = &applicantR{}
				}
				foreign.R.ApplicationStateTransitions = append(foreign.R.ApplicationStateTransitions, local)
				break
			}
		}
	}

	return nil
}

// LoadFromApplicationState allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (applicationStateTransitionL) LoadFromApplicationState(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApplicationStateTransition interface{}, mods queries.Applicator) error {
	var slice []*ApplicationStateTransition
	var object *ApplicationStateTransition

	if singular {
		object = maybeApplicationStateTransition.(*ApplicationStateTransition)
	} else {
		slice = *maybeApplicationStateTransition.(*[]*ApplicationStateTransition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &applicationStateTransitionR{}
		}
		args = append(args, object.FromApplicationStateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &applicationStateTransitionR{}
			}

			for _, a := range args {
				if a == obj.FromApplicationStateID {
					continue Outer
				}
			}

			args = append(args, obj.FromApplicationStateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`application_states`), qm.WhereIn(`application_states.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ApplicationState")
	}

	var resultSlice []*ApplicationState
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ApplicationState")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for application_states")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for application_states")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromApplicationState = foreign
		if foreign.R == nil {
			foreign.R = &applicationStateR{}
		}
		foreign.R.FromApplicationStateApplicationStateTransitions = append(foreign.R.FromApplicationStateApplicationStateTransitions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FromApplicationStateID == foreign.ID {
				local.R.FromApplicationState = foreign
				if foreign.R == nil {
					foreign.R = &applicationStateR{}
				}
				foreign.R.FromApplicationStateApplicationStateTransitions = append(foreign.R.FromApplicationStateApplicationStateTransitions, local)
				break
			}
		}
	}

	return nil
}

// LoadToApplicationState allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (applicationStateTransitionL) LoadToApplicationState(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApplicationStateTransition interface{}, mods queries.Applicator) error {
	var slice []*ApplicationStateTransition
	var object *ApplicationStateTransition

	if singular {
		object = maybeApplicationStateTransition.(*ApplicationStateTransition)
	} else {
		slice = *maybeApplicationStateTransition.(*[]*ApplicationStateTransition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &applicationStateTransitionR{}
		}
		args = append(args, object.ToApplicationStateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &applicationStateTransitionR{}
			}

			for _, a := range args {
				if a == obj.ToApplicationStateID {
					continue Outer
				}
			}

			args = append(args, obj.ToApplicationStateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`application_states`), qm.WhereIn(`application_states.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ApplicationState")
	}

	var resultSlice []*ApplicationState
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ApplicationState")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for application_states")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for application_states")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ToApplicationState = foreign
		if foreign.R == nil {
			foreign.R = &applicationStateR{}
		}
		foreign.R.ToApplicationStateApplicationStateTransitions = append(foreign.R.ToApplicationStateApplicationStateTransitions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ToApplicationStateID == foreign.ID {
				local.R.ToApplicationState = foreign
				if foreign.R == nil {
					foreign.R = &applicationStateR{}
				}
				foreign.R.ToApplicationStateApplicationStateTransitions = append(foreign.R.ToApplicationStateApplicationStateTransitions, local)
				break
			}
		}
	}

	return nil
}

// SetApplicant of the applicationStateTransition to the related item.
// Sets o.R.Applicant to related.
// Adds o to related.R.ApplicationStateTransitions.
func (o *ApplicationStateTransition) SetApplicant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Applicant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"application_state_transitions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"applicant_id"}),
		strmangle.WhereClause("\"", "\"", 2, applicationStateTransitionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ApplicantID, o.FromApplicationStateID, o.ToApplicationStateID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ApplicantID = related.ID
	if o.R == nil {
		o.R = &applicationStateTransitionR{
			Applicant: related,
		}
	} else {
		o.R.Applicant = related
	}

	if related.R == nil {
		related.R = &applicantR{
			ApplicationStateTransitions: ApplicationStateTransitionSlice{o},
		}
	} else {
		related.R.ApplicationStateTransitions = append(related.R.ApplicationStateTransitions, o)
	}

	return nil
}

// SetFromApplicationState of the applicationStateTransition to the related item.
// Sets o.R.FromApplicationState to related.
// Adds o to related.R.FromApplicationStateApplicationStateTransitions.
func (o *ApplicationStateTransition) SetFromApplicationState(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ApplicationState) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"application_state_transitions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"from_application_state_id"}),
		strmangle.WhereClause("\"", "\"", 2, applicationStateTransitionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ApplicantID, o.FromApplicationStateID, o.ToApplicationStateID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FromApplicationStateID = related.ID
	if o.R == nil {
		o.R = &applicationStateTransitionR{
			FromApplicationState: related,
		}
	} else {
		o.R.FromApplicationState = related
	}

	if related.R == nil {
		related.R = &applicationStateR{
			FromApplicationStateApplicationStateTransitions: ApplicationStateTransitionSlice{o},
		}
	} else {
		related.R.FromApplicationStateApplicationStateTransitions = append(related.R.FromApplicationStateApplicationStateTransitions, o)
	}

	return nil
}

// SetToApplicationState of the applicationStateTransition to the related item.
// Sets o.R.ToApplicationState to related.
// Adds o to related.R.ToApplicationStateApplicationStateTransitions.
func (o *ApplicationStateTransition) SetToApplicationState(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ApplicationState) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"application_state_transitions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"to_application_state_id"}),
		strmangle.WhereClause("\"", "\"", 2, applicationStateTransitionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ApplicantID, o.FromApplicationStateID, o.ToApplicationStateID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ToApplicationStateID = related.ID
	if o.R == nil {
		o.R = &applicationStateTransitionR{
			ToApplicationState: related,
		}
	} else {
		o.R.ToApplicationState = related
	}

	if related.R == nil {
		related.R = &applicationStateR{
			ToApplicationStateApplicationStateTransitions: ApplicationStateTransitionSlice{o},
		}
	} else {
		related.R.ToApplicationStateApplicationStateTransitions = append(related.R.ToApplicationStateApplicationStateTransitions, o)
	}

	return nil
}

// ApplicationStateTransitions retrieves all the records using an executor.
func ApplicationStateTransitions(mods ...qm.QueryMod) applicationStateTransitionQuery {
	mods = append(mods, qm.From("\"application_state_transitions\""))
	return applicationStateTransitionQuery{NewQuery(mods...)}
}

// FindApplicationStateTransition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindApplicationStateTransition(ctx context.Context, exec boil.ContextExecutor, applicantID string, fromApplicationStateID string, toApplicationStateID string, selectCols ...string) (*ApplicationStateTransition, error) {
	applicationStateTransitionObj := &ApplicationStateTransition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"application_state_transitions\" where \"applicant_id\"=$1 AND \"from_application_state_id\"=$2 AND \"to_application_state_id\"=$3", sel,
	)

	q := queries.Raw(query, applicantID, fromApplicationStateID, toApplicationStateID)

	err := q.Bind(ctx, exec, applicationStateTransitionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from application_state_transitions")
	}

	return applicationStateTransitionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ApplicationStateTransition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no application_state_transitions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(applicationStateTransitionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	applicationStateTransitionInsertCacheMut.RLock()
	cache, cached := applicationStateTransitionInsertCache[key]
	applicationStateTransitionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			applicationStateTransitionAllColumns,
			applicationStateTransitionColumnsWithDefault,
			applicationStateTransitionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(applicationStateTransitionType, applicationStateTransitionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(applicationStateTransitionType, applicationStateTransitionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"application_state_transitions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"application_state_transitions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into application_state_transitions")
	}

	if !cached {
		applicationStateTransitionInsertCacheMut.Lock()
		applicationStateTransitionInsertCache[key] = cache
		applicationStateTransitionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ApplicationStateTransition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ApplicationStateTransition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	applicationStateTransitionUpdateCacheMut.RLock()
	cache, cached := applicationStateTransitionUpdateCache[key]
	applicationStateTransitionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			applicationStateTransitionAllColumns,
			applicationStateTransitionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update application_state_transitions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"application_state_transitions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, applicationStateTransitionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(applicationStateTransitionType, applicationStateTransitionMapping, append(wl, applicationStateTransitionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update application_state_transitions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for application_state_transitions")
	}

	if !cached {
		applicationStateTransitionUpdateCacheMut.Lock()
		applicationStateTransitionUpdateCache[key] = cache
		applicationStateTransitionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q applicationStateTransitionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for application_state_transitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for application_state_transitions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ApplicationStateTransitionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationStateTransitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"application_state_transitions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, applicationStateTransitionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in applicationStateTransition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all applicationStateTransition")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ApplicationStateTransition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no application_state_transitions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(applicationStateTransitionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	applicationStateTransitionUpsertCacheMut.RLock()
	cache, cached := applicationStateTransitionUpsertCache[key]
	applicationStateTransitionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			applicationStateTransitionAllColumns,
			applicationStateTransitionColumnsWithDefault,
			applicationStateTransitionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			applicationStateTransitionAllColumns,
			applicationStateTransitionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert application_state_transitions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(applicationStateTransitionPrimaryKeyColumns))
			copy(conflict, applicationStateTransitionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"application_state_transitions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(applicationStateTransitionType, applicationStateTransitionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(applicationStateTransitionType, applicationStateTransitionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert application_state_transitions")
	}

	if !cached {
		applicationStateTransitionUpsertCacheMut.Lock()
		applicationStateTransitionUpsertCache[key] = cache
		applicationStateTransitionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ApplicationStateTransition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ApplicationStateTransition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ApplicationStateTransition provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), applicationStateTransitionPrimaryKeyMapping)
	sql := "DELETE FROM \"application_state_transitions\" WHERE \"applicant_id\"=$1 AND \"from_application_state_id\"=$2 AND \"to_application_state_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from application_state_transitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for application_state_transitions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q applicationStateTransitionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no applicationStateTransitionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from application_state_transitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for application_state_transitions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ApplicationStateTransitionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationStateTransitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"application_state_transitions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, applicationStateTransitionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from applicationStateTransition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for application_state_transitions")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ApplicationStateTransition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindApplicationStateTransition(ctx, exec, o.ApplicantID, o.FromApplicationStateID, o.ToApplicationStateID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ApplicationStateTransitionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ApplicationStateTransitionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationStateTransitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"application_state_transitions\".* FROM \"application_state_transitions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, applicationStateTransitionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ApplicationStateTransitionSlice")
	}

	*o = slice

	return nil
}

// ApplicationStateTransitionExists checks if the ApplicationStateTransition row exists.
func ApplicationStateTransitionExists(ctx context.Context, exec boil.ContextExecutor, applicantID string, fromApplicationStateID string, toApplicationStateID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"application_state_transitions\" where \"applicant_id\"=$1 AND \"from_application_state_id\"=$2 AND \"to_application_state_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, applicantID, fromApplicationStateID, toApplicationStateID)
	}
	row := exec.QueryRowContext(ctx, sql, applicantID, fromApplicationStateID, toApplicationStateID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if application_state_transitions exists")
	}

	return exists, nil
}
